scalar DateTime @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_8601")

type User {
  id: ID!
  username: String!
  chirps: [Chirp!]!
}

type Chirp {
  id: ID!
  contents: String!
  date: DateTime!
  author: User!
  parent: Chirp
  replies: [Chirp!]!
}

type Query {
  user(id: ID!): User!
  chirp(id: ID!): Chirp!
  chirps(first: Int, after: String, last: Int, before: String): ChirpConnection!
}

type ChirpConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  nodes: [Chirp!]!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload!
  chirp(input: ChirpInput!): ChirpPayload!
  reply(input: ReplyInput!): ReplyPayload!
}

input CreateUserInput {
  username: String!
}

type CreateUserPayload {
  user: User
  errors: [CreateUsageError!]
}

union CreateUsageError = EmptyUsername | InvalidUsername | UsernameTaken

input ChirpInput {
  contents: String!
}

type ChirpPayload {
  chirp: Chirp
  errors: [ChirpUsageError!]
}

union ChirpUsageError = EmptyContents | TooLongContents

input ReplyInput {
  chirp: ID!
  contents: String!
}

type ReplyPayload {
  reply: Chirp
  errors: [ReplyUsageError!]
}

union ReplyUsageError = EmptyContents | TooLongContents | ChirpNotFound

interface UsageError {
  message: String!
}

type EmptyUsername implements UsageError {
  message: String!
}

type InvalidUsername implements UsageError {
  message: String!
  username: String!
}

type UsernameTaken implements UsageError {
  message: String!
  username: String!
}

type EmptyContents implements UsageError {
  message: String!
}

type TooLongContents implements UsageError {
  message: String!
  length: Int!
  maxLength: Int!
}

type ChirpNotFound implements UsageError {
  message: String!
  chirpId: ID!
}
